import pandas as pd
import numpy as np

def compare_column_changes(curr_df, prev_df, key_column, numeric_columns, custom_thresholds=None, default_threshold=None):
    if default_threshold is None:
        default_threshold = {"min": -0.1, "max": 0.1, "use_percentage": True}
    if custom_thresholds is None:
        custom_thresholds = {}

    # Merge danych na podstawie klucza, zachowując dodatkowe kolumny Alfa i Beta
    merged = prev_df.merge(curr_df, on=key_column, suffixes=("_prev", "_curr"), how="outer")
    merged["Alfa"] = curr_df.get("Alfa", np.nan)
    merged["Beta"] = curr_df.get("Beta", np.nan)

    results = []
    
    for col in numeric_columns:
        prev_col = f"{col}_prev"
        curr_col = f"{col}_curr"

        # Pobieramy thresholdy dla danej kolumny (jeśli brak – używamy domyślnych)
        thresholds = custom_thresholds.get(col, default_threshold)
        min_thresh = thresholds["min"]
        max_thresh = thresholds["max"]
        use_percentage = thresholds["use_percentage"]

        # Sprawdzamy, czy wartości są numeryczne
        prev_clean = pd.to_numeric(merged[prev_col], errors="coerce")
        curr_clean = pd.to_numeric(merged[curr_col], errors="coerce")

        is_prev_numeric = prev_clean.notna()
        is_curr_numeric = curr_clean.notna()

        # Obliczamy różnicę absolutną i procentową
        difference = curr_clean - prev_clean
        percent_diff = np.where(
            (prev_clean != 0) & is_prev_numeric & is_curr_numeric,
            (difference / prev_clean) * 100,
            np.nan
        )

        # Tworzymy maskę dla zmian zgodnie z thresholdami
        if use_percentage:
            threshold_exceeded = (percent_diff < min_thresh) | (percent_diff > max_thresh)
        else:
            threshold_exceeded = (difference < min_thresh) | (difference > max_thresh)

        # Oznaczanie przypadków specjalnych:
        threshold_exceeded |= (prev_clean == 0) & is_curr_numeric & (curr_clean != 0)  # Było 0, teraz liczba
        threshold_exceeded |= ~is_prev_numeric | ~is_curr_numeric  # Jedna z wartości nienumeryczna

        # Nie pomijamy żadnych zmian – pobieramy wszystko
        changed_records = merged.loc[:, [key_column, prev_col, curr_col, "Alfa", "Beta"]].copy()
        changed_records["column"] = col
        changed_records["Previous Value"] = merged[prev_col]
        changed_records["Current Value"] = merged[curr_col]
        changed_records["Difference"] = difference
        changed_records["Difference %"] = percent_diff
        changed_records["Threshold Min"] = min_thresh
        changed_records["Threshold Max"] = max_thresh
        changed_records["Threshold%"] = use_percentage
        changed_records["Threshold_exceeded"] = threshold_exceeded

        results.append(changed_records)

    # Łączymy wszystkie wyniki w jeden DataFrame i sortujemy
    final_results = pd.concat(results, ignore_index=True).sort_values(by=[key_column, "column"]).reset_index(drop=True)

    return final_results
